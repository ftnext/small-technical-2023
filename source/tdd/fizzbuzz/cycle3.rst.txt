3サイクル
====================

.. code-block:: markdown
    :caption: TODOリスト

    - [ ] 数をそのまま文字列に変換する
      - [x] 1を渡すと文字列1を返す
      - [x] 2を渡すと文字列2を返す
    - [ ] 3の倍数のときは数の代わりに「Fizz」に変換する
      - [ ] 3を渡すと文字列Fizzを返す
    - [ ] 5の倍数のときは数の代わりに「Buzz」に変換する
    - [ ] 15の倍数のときは数の代わりに「FizzBuzz」に変換する

Red🟥 3のケース
------------------------------

.. code-block:: python
    :caption: tests/test_fizzbuzz.py

    class TestFizzBuzz:
        def test_3を渡すと文字列Fizzを返す(self):
            fizz_buzz = FizzBuzz()
            assert "Fizz" == fizz_buzz.convert(3)

2件通り1件落ちる 🟩🟩🟥

Green🟩 3のケース（仮実装）
------------------------------

.. code-block:: python
    :caption: fizzbuzz/__init__.py

    class FizzBuzz:
        def convert(self, number: int) -> str:
            if number == 3:
                return "Fizz"
            return str(number)

テスト3件通る🙌

Refactor テストコードの重複除去
----------------------------------------

テストコードにはインスタンス化の重複がある。
pytestの *フィクスチャ* を使って **インスタンス化を1箇所に** まとめる

VS Codeの **Extract method** が使える。
ここではクラスに抽出（モジュールレベルで抽出しても動きます）

.. code-block:: python
    :caption: tests/test_fizzbuzz.py

    import pytest


    class TestFizzBuzz:
        @pytest.fixture
        def fizz_buzz(self) -> FizzBuzz:
            return FizzBuzz()

定義したフィクスチャを各テスト（メソッド）で利用

.. code-block:: python
    :caption: tests/test_fizzbuzz.py

    class TestFizzBuzz:
        def test_3を渡すと文字列Fizzを返す(self, fizz_buzz):
            assert "Fizz" == fizz_buzz.convert(3)

倍数のときへと一般化
------------------------------

これまでのサイクルのおかげで自信が少しはあるので、**三角測量を経ずに一般化**

.. code-block:: python
    :caption: fizzbuzz/__init__.py

    class FizzBuzz:
        def convert(self, number: int) -> str:
            if number % 3 == 0:
                return "Fizz"
            return str(number)
