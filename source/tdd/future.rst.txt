考察
==========

ケント・ベックの定義（2つのルール 『テスト駆動開発』Kindle の位置No.33-34）

    - 自動化されたテストが失敗したときのみ、新しいコードを書く。
    - 重複を除去する。

Red -> Green -> Refactor

Uncle Bobの3原則でTDDを進めると、 **strict** になった

Before（小さいテスト駆動開発を知る前）
------------------------------------------------------------

* 1のケースのテストコードを一気に全部書く（Red🟥）
* 1のケースのテストを通す実装を全部書く（Green🟩）
* リファクタリング
* 2のケースのテストコードへ

1つのテストケースに対してRedとGreenは1つずつ。

小さいテスト駆動開発
------------------------------

これに対して、ここで見た小さいテスト駆動開発では、RedとGreenを細かく行き来する

* 1のケースのテストコードをエラーが出るまで書く（Red🟥）
* 上記のエラーを解決する実装を書く（Green🟩）
* リファクタリング
* 1のケースのテストコードの続きをエラーが出るまで書く（Red🟥）
* 上記のエラーを解決する実装を書く（Green🟩）
* リファクタリング
* 1のケースのテストコードの続きをエラーが出るまで書く（Red🟥）
* 上記のエラーを解決する実装を書く（Green🟩）
* リファクタリング
* 2のケースのテストコードへ

テストも実装も **少しずつ** できあがっていく！

この先
==========

動作するドキュメントにする
------------------------------

TDD Boot Campでは、t-wadaさんはこのあと、テストコードを **動作するドキュメント** にしていく

* TODOリスト（仕様）のネスト構造をテストコードに反映

  * テストコードで **クラスがネスト** する

* テストを **最小限** にしておく

  * 三角測量で作ったテストは片方 **消す** （書いた人だけが三角測量で進んだから似たテストがあると分かっている）

モックを使ったTDDの例
------------------------------

* 『ちょうぜつ本（`ちょうぜつソフトウェア設計入門 <https://gihyo.jp/book/2022/978-4-297-13234-7>`__）』より、FizzBuzzを **シンプルな設計** で実装する

  * *畳み込み演算* と看破した例
